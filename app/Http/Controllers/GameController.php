<?php
// app/Http/Controllers/GameController.php

declare(strict_types=1);

namespace App\Http\Controllers;

// use App\Domain\Game\Repositories\TestGameRepository;
use App\Domain\Game\Repositories\InMemoryGameRepository;
use App\Application\Services\GameService;
use App\Application\Services\DistributionService;
use App\Application\Services\BiddingService;
use App\Application\Services\QuarrelService;
use App\Application\Services\ReadinessService;
use App\Application\DTO\StartGameDTO;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use App\Events\GameStarted;
use App\Events\PlayerReady;
use App\Domain\Game\Enums\GameStatus;
use App\Events\PlayerActionTaken;
use App\Events\CardsDistributed;
use App\Events\GameFinished;
use Illuminate\Support\Facades\Auth;

class GameController extends Controller
{
    public function __construct(
        private GameService $gameService,
        private DistributionService $distributionService,
        private BiddingService $biddingService,
        private QuarrelService $quarrelService,
        private ReadinessService $readinessService
    ) {}

    /**
     * üéØ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
     */
    public function start(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'room_id' => 'required|integer|min:1',
            'players' => 'required|array|min:2',
            'players.*' => 'integer|min:1'
        ]);

        $dto = StartGameDTO::fromRequest($request);
        $game = $this->gameService->startNewGame($dto);

        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        $repository = new \App\Domain\Game\Repositories\CachedGameRepository();
        $repository->save($game);

        \Log::info("Game created with players: " . count($game->getPlayers()));

        broadcast(new GameStarted(
            gameId: $game->getId()->toInt(),
            players: $this->formatPlayersForBroadcast($game->getPlayers()),
            firstPlayerId: $this->getFirstPlayerId($game),
            initialState: $this->getInitialGameState($game)
        ));

        return response()->json([
            'success' => true,
            'game_id' => $game->getId()->toInt(),
            'status' => $game->getStatus()->value,
            'message' => 'Game created. Players need to mark ready within 10 seconds.'
        ]);
    }

    /**
     * üéØ –û—Ç–º–µ—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–≥–æ
     */
    public function markReady(Request $request)
    {
        $validated = $request->validate([
            'game_id' => 'required|integer|min:1',
            'player_id' => 'required|integer|min:1'
        ]);
        
        $userId = (int)$validated['player_id'];
        $gameId = (int)$validated['game_id'];
        
        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤—Ä—É—á–Ω—É—é –≤–º–µ—Å—Ç–æ getPlayerByUserId()
        $game = $this->readinessService->getGame($gameId);
        
        // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ user_id
        $player = null;
        foreach ($game->getPlayers() as $p) {
            $playerUserId = $p->getUserId();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º toInt()
            if (is_object($playerUserId) && method_exists($playerUserId, 'toInt')) {
                if ($playerUserId->toInt() === $userId) {
                    $player = $p;
                    break;
                }
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            elseif ((int)$playerUserId === $userId) {
                $player = $p;
                break;
            }
        }
        
        if (!$player) {
            // üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–∞–∫–∏–µ –∏–≥—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?
            $availablePlayers = [];
            foreach ($game->getPlayers() as $p) {
                $playerUserId = $p->getUserId();
                if (is_object($playerUserId) && method_exists($playerUserId, 'toInt')) {
                    $availablePlayers[] = $playerUserId->toInt();
                } else {
                    $availablePlayers[] = (int)$playerUserId;
                }
            }
            
            throw new \DomainException("Player {$userId} not found in game. Available: " . implode(', ', $availablePlayers));
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        $oldStatus = $game->getStatus();
        
        $this->readinessService->markPlayerReady($game, $player);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–≥—Ä—É
        $updatedGame = $this->readinessService->getGame($gameId);
        
        // üéØ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ timeUntilStart
        $timeUntilStart = $updatedGame->getStatus() === GameStatus::WAITING ? 5 : 0;

        // üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        $readyPlayersCount = count(array_filter($updatedGame->getPlayers(), function($p) {
            return $p->isReady();
        }));

        // üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        broadcast(new PlayerReady(
            gameId: $gameId,
            playerId: $userId,        // üéØ playerId –≤–º–µ—Å—Ç–æ userId
            playerStatus: 'ready',    // üéØ playerStatus –≤–º–µ—Å—Ç–æ isReady
            readyPlayersCount: count(array_filter($updatedGame->getPlayers(), function($p) {
                return $p->isReady();
            })),                      // üéØ readyPlayersCount –≤–º–µ—Å—Ç–æ gameStatus
            timeUntilStart: $timeUntilStart
        ));
        
        // üéØ –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        if ($updatedGame->getStatus() === GameStatus::ACTIVE) {
            broadcast(new GameStarted(
                gameId: $gameId,
                players: $this->formatPlayersForBroadcast($updatedGame->getPlayers()),
                firstPlayerId: (string)$updatedGame->getCurrentPlayerPosition(), // üéØ firstPlayerId –∫–∞–∫ string
                initialState: $this->getInitialGameState($updatedGame)
            ));
        }
        
        return response()->json([
            'status' => 'success',
            'game_status' => $updatedGame->getStatus()->value,
            'ready_players' => $readyPlayersCount, // üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            'time_until_start' => $timeUntilStart
        ]);
    }

    /**
     * üéØ –ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç
     */
    public function startDistribution(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);
        
        // üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –≤—ã–≤–µ–¥–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        \Log::info("Game status before distribution: " . $game->getStatus()->value);
        \Log::info("Ready players count: " . $this->readinessService->getReadyPlayersCount($game));
        \Log::info("Total players: " . count($game->getPlayers()));
        
        // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if ($game->getStatus() !== \App\Domain\Game\Enums\GameStatus::ACTIVE) {
            return response()->json([
                'success' => false,
                'message' => 'Game is not active. Current status: ' . $game->getStatus()->value,
                'current_status' => $game->getStatus()->value,
                'ready_players' => $this->readinessService->getReadyPlayersCount($game)
            ], 400);
        }
        
        $distributionResult = $this->distributionService->distributeCards($game);

        // üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ CardsDistributed
        broadcast(new CardsDistributed(
            gameId: $gameId,
            playerCards: $this->formatPlayerCards($distributionResult),
            communityCards: $distributionResult['community_cards'] ?? [],
            round: $distributionResult['round'] ?? 'preflop'
        ));

        return response()->json([
            'success' => true,
            'message' => 'Cards distributed',
            'game_status' => $game->getStatus()->value
        ]);
    }

    /**
     * üéØ –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ (—Å—Ç–∞–≤–∫–∞, –ø–∞—Å, –≤—Å–∫—Ä—ã—Ç–∏–µ –∏ —Ç.–¥.)
     */
    public function playerAction(Request $request, int $gameId): JsonResponse
    {
        $validated = $request->validate([
            'player_id' => 'required|integer',
            'action' => 'required|string',
            'bet_amount' => 'sometimes|integer|min:0'
        ]);

        $game = $this->getGameById($gameId);
        $player = $this->getPlayerById($game, (int)$validated['player_id']);
        $action = \App\Domain\Game\Enums\PlayerAction::from($validated['action']);

        $this->biddingService->processPlayerAction(
            $game, 
            $player, 
            $action, 
            $validated['bet_amount'] ?? null
        );

        broadcast(new PlayerActionTaken(
            gameId: $gameId,
            playerId: $player->getUserId(),
            action: $action->value,
            betAmount: $validated['bet_amount'] ?? null,
            newPlayerPosition: $game->getCurrentPlayerPosition(),
            bank: $game->getBank()
        ));

        return response()->json([
            'success' => true,
            'action' => $action->value,
            'player_id' => $player->getUserId(),
            'current_player_position' => $game->getCurrentPlayerPosition(),
            'game_status' => $game->getStatus()->value
        ]);
    }

    /**
     * üéØ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
     */
    public function finish(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);
        $results = $this->gameService->finishGame($game);

        // üéØ –î–û–ë–ê–í–ò–¢–¨ broadcast —Å–æ–±—ã—Ç–∏—è GameFinished
        broadcast(new GameFinished(
            gameId: $gameId,
            winnerId: $this->getMainWinnerId($results),
            scores: $this->formatScores($results),
            finalState: $this->getFinalState($game, $results)
        ));

        return response()->json([
            'success' => true,
            'winners' => array_map(fn($player) => [
                'user_id' => $player->getUserId(),
                'position' => $player->getPosition(),
                'prize' => $results['prize_per_winner']
            ], $results['winners']),
            'total_prize' => $results['total_prize'],
            'game_status' => $game->getStatus()->value
        ]);
    }

    /**
     * üéØ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–ø–æ—Ä (—Å–≤–∞—Ä—É)
     */
    public function initiateQuarrel(Request $request, int $gameId): JsonResponse
    {
        $validated = $request->validate([
            'winning_players' => 'required|array|min:2',
            'winning_players.*' => 'integer|min:1'
        ]);

        $game = $this->getGameById($gameId);
        $winningPlayers = $this->getPlayersByIds($game, $validated['winning_players']);

        $quarrelInitiated = $this->quarrelService->initiateQuarrel($game, $winningPlayers);

        broadcast(new QuarrelInitiated($gameId, $winningPlayers));

        return response()->json([
            'success' => true,
            'quarrel_initiated' => $quarrelInitiated,
            'message' => $quarrelInitiated ? 'Quarrel initiated' : 'Quarrel not approved by winners'
        ]);
    }

    /**
     * üéØ –ù–∞—á–∞—Ç—å —Å–ø–æ—Ä (–ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è)
     */
    public function startQuarrel(Request $request, int $gameId): JsonResponse
    {
        $validated = $request->validate([
            'participants' => 'required|array|min:2',
            'participants.*' => 'integer|min:1'
        ]);

        $game = $this->getGameById($gameId);
        $participants = $this->getPlayersByIds($game, $validated['participants']);

        $this->quarrelService->startQuarrel($game, $participants);

        broadcast(new QuarrelStarted($gameId, $participants));

        return response()->json([
            'success' => true,
            'message' => 'Quarrel started with card redistribution'
        ]);
    }

    /**
     * üéØ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–æ—Ä –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
     */
    public function resolveQuarrel(Request $request, int $gameId): JsonResponse
    {
        $validated = $request->validate([
            'participants' => 'required|array|min:2',
            'participants.*' => 'integer|min:1'
        ]);

        $game = $this->getGameById($gameId);
        $participants = $this->getPlayersByIds($game, $validated['participants']);

        $winners = $this->quarrelService->resolveQuarrel($game, $participants);

        broadcast(new QuarrelResolved($gameId, $winners));

        return response()->json([
            'success' => true,
            'winners' => array_map(fn($player) => [
                'user_id' => $player->getUserId(),
                'position' => $player->getPosition()
            ], $winners)
        ]);
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–∞—Ö
     */
    public function getTimers(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);
        $timers = $this->readinessService->getTimersInfo($game);

        return response()->json([
            'success' => true,
            'timers' => $timers,
            'game_status' => $game->getStatus()->value,
            'ready_players_count' => $this->readinessService->getReadyPlayersCount($game),
            'time_until_start' => $this->readinessService->getTimeUntilGameStart($game)
        ]);
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã (–¥–ª—è cron job –∏–ª–∏ WebSocket)
     */
    public function checkTimeouts(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);
        
        $readyTimeouts = $this->readinessService->checkReadyTimeouts($game);
        $turnTimeouts = $this->readinessService->checkTurnTimeouts($game);

        $response = [
            'success' => true,
            'ready_timeouts' => count($readyTimeouts),
            'turn_timeouts' => count($turnTimeouts),
            'game_status' => $game->getStatus()->value
        ];

        // üéØ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—ã–≤—à–∏—Ö –∏–≥—Ä–æ–∫–∞—Ö
        if (!empty($readyTimeouts)) {
            $response['timed_out_players'] = array_map(
                fn($player) => $player->getUserId(),
                $readyTimeouts
            );
        }

        return response()->json($response);
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
     */
    public function getStatus(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);

        return response()->json([
            'success' => true,
            'game_id' => $gameId,
            'status' => $game->getStatus()->value,
            'current_player_position' => $game->getCurrentPlayerPosition(),
            'ready_players_count' => $this->readinessService->getReadyPlayersCount($game),
            'total_players' => count($game->getPlayers()),
            'bank' => $game->getBank()
        ]);
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É –ø–æ ID (–†–ï–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø)
     */
    // private function getGameById(int $gameId)
    // {
    //     // üéØ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É —Å –∏–≥—Ä–æ–∫–∞–º–∏
    //     // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç GameRepository::find($gameId)
        
    //     $game = new \App\Domain\Game\Entities\Game(
    //         \App\Domain\Game\ValueObjects\GameId::fromInt($gameId),
    //         \App\Domain\Game\Enums\GameStatus::WAITING,
    //         $gameId,
    //         \App\Domain\Game\Enums\GameMode::OPEN
    //     );
        
    //     // üéØ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    //     $players = [
    //         new \App\Domain\Game\Entities\Player(
    //             \App\Domain\Game\ValueObjects\PlayerId::fromInt(1),
    //             \App\Domain\Game\ValueObjects\UserId::fromInt(1),
    //             \App\Domain\Game\Enums\PlayerStatus::WAITING,
    //             1000,
    //             1
    //         ),
    //         new \App\Domain\Game\Entities\Player(
    //             \App\Domain\Game\ValueObjects\PlayerId::fromInt(2), 
    //             \App\Domain\Game\ValueObjects\UserId::fromInt(2),
    //             \App\Domain\Game\Enums\PlayerStatus::WAITING,
    //             1000,
    //             2
    //         ),
    //         new \App\Domain\Game\Entities\Player(
    //             \App\Domain\Game\ValueObjects\PlayerId::fromInt(3),
    //             \App\Domain\Game\ValueObjects\UserId::fromInt(3),
    //             \App\Domain\Game\Enums\PlayerStatus::WAITING,
    //             1000, 
    //             3
    //         )
    //     ];
        
    //     // üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
    //     $reflection = new \ReflectionClass($game);
    //     $playersProperty = $reflection->getProperty('players');
    //     $playersProperty->setAccessible(true);
    //     $playersProperty->setValue($game, $players);

    //     return $this->gameRepository->find(
    //         \App\Domain\Game\ValueObjects\GameId::fromInt($gameId)
    //     );
        
    //     // return $game;
    // }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É –ø–æ ID (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô)
     */
    private function getGameById(int $gameId)
    {
        $repository = new \App\Domain\Game\Repositories\CachedGameRepository();
        $game = $repository->find(\App\Domain\Game\ValueObjects\GameId::fromInt($gameId));
        
        \Log::info("Game {$gameId} status: " . $game->getStatus()->value);
        \Log::info("Game {$gameId} players: " . count($game->getPlayers()));
        
        // üéØ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö
        foreach ($game->getPlayers() as $player) {
            \Log::info("Player in game: {$player->getUserId()}, status: {$player->getStatus()->value}");
        }
        
        return $game;
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     */
    // private function getPlayerById($game, int $playerId)
    // {
    //     foreach ($game->getPlayers() as $player) {
    //         if ($player->getUserId() === $playerId) {
    //             return $player;
    //         }
    //     }
    //     throw new \DomainException('Player not found in game');
    // }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø INT)
     */
    private function getPlayerById($game, int $playerId)
    {
        foreach ($game->getPlayers() as $player) {
            // üéØ –ü–æ–ª—É—á–∞–µ–º user_id –∫–∞–∫ —á–∏—Å–ª–æ
            $userId = $player->getUserId();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º toInt()
            if (is_object($userId) && method_exists($userId, 'toInt')) {
                if ($userId->toInt() === $playerId) {
                    return $player;
                }
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            elseif ((int)$userId === $playerId) {
                return $player;
            }
        }
        
        // üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
        $availablePlayers = [];
        foreach ($game->getPlayers() as $player) {
            $userId = $player->getUserId();
            if (is_object($userId) && method_exists($userId, 'toInt')) {
                $availablePlayers[] = $userId->toInt();
            } else {
                $availablePlayers[] = (int)$userId;
            }
        }
        
        throw new \DomainException("Player $playerId not found in game. Available: " . implode(', ', $availablePlayers));
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ID
     */
    private function getPlayersByIds($game, array $playerIds): array
    {
        $players = [];
        foreach ($playerIds as $playerId) {
            $players[] = $this->getPlayerById($game, $playerId);
        }
        return $players;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    private function formatPlayersForBroadcast(array $players): array
    {
        return array_map(function ($player) {
            return [
                'id' => $player->getUserId(),        // üéØ –¢–µ–ø–µ—Ä—å getUserId() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int
                'position' => $player->getPosition(),
                'status' => $player->getStatus()->value,
                'balance' => $player->getBalance(),
                'current_bet' => $player->getCurrentBet(),
                'is_ready' => $player->isReady(),
            ];
        }, $players);
    }

    // üéØ –î–û–ë–ê–í–ò–¢–¨ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private function getMainWinnerId($results): string
    {
        $winners = $results['winners'] ?? [];
        return $winners ? (string)$winners[0]->getUserId() : '';
    }

    private function formatScores($results): array
    {
        $scores = [];
        foreach ($results['winners'] ?? [] as $winner) {
            $scores[(string)$winner->getUserId()] = $results['prize_per_winner'] ?? 0;
        }
        return $scores;
    }

    private function getFinalState($game, $results): array
    {
        return [
            'total_prize' => $results['total_prize'] ?? 0,
            'winners_count' => count($results['winners'] ?? []),
            'final_status' => $game->getStatus()->value
        ];
    }

    private function formatPlayerCards($distributionResult): array
    {
        $playerCards = [];
        foreach ($distributionResult['player_cards'] ?? [] as $playerId => $cards) {
            $playerCards[$playerId] = $cards;
        }
        return $playerCards;
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å ID –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    private function getFirstPlayerId($game): string
    {
        $players = $game->getPlayers();
        return $players && count($players) > 0 ? (string)$players[0]->getUserId() : '';
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    private function getInitialGameState($game): array
    {
        return [
            'status' => $game->getStatus()->value,
            'current_player_position' => $game->getCurrentPlayerPosition(),
            'bank' => $game->getBank(),
            'round' => 'waiting'
        ];
    }

    /**
     * üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    public function forceStartGame(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);
        
        \Log::info("Force starting game...");
        
        // üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ ReadinessService
        $this->readinessService->startGame($game);
        
        \Log::info("Game force started. New status: " . $game->getStatus()->value);

        return response()->json([
            'success' => true,
            'message' => 'Game force started',
            'game_status' => $game->getStatus()->value
        ]);
    }

    /**
     * üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    public function forceStart(int $gameId): JsonResponse
    {
        $game = $this->getGameById($gameId);
        
        \Log::info("üöÄ Force starting game...");
        
        // üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        $this->readinessService->startGame($game);
        
        \Log::info("üöÄ Game force started. New status: " . $game->getStatus()->value);

        return response()->json([
            'success' => true,
            'message' => 'Game force started',
            'game_status' => $game->getStatus()->value
        ]);
    }

    /**
     * üéØ –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    public function clearGame(int $gameId): JsonResponse
    {
        $repository = new \App\Domain\Game\Repositories\CachedGameRepository();
        $repository->clear($gameId);
        
        \Log::info("Game state cleared for game: " . $gameId);

        return response()->json([
            'success' => true,
            'message' => 'Game state cleared successfully'
        ]);
    }

}