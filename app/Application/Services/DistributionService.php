<?php

declare(strict_types=1);

namespace App\Application\Services;

use App\Domain\Game\Entities\Game;
use App\Domain\Game\Entities\Player;
use App\Domain\Game\Entities\Card;
use App\Domain\Game\Enums\CardSuit;
use App\Domain\Game\Enums\CardRank;

class DistributionService
{
    /**
     * üéØ –†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–ª–æ–¥–∞)
     */
    public function distributeCards(Game $game): void
    {
        $players = $game->getActivePlayers();
        $deck = $this->createSimplifiedDeck();
        
        // üéØ –†–∞–∑–¥–∞–µ–º –ø–æ 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        foreach ($players as $player) {
            $playerCards = [];
            for ($i = 0; $i < 3; $i++) {
                if (!empty($deck)) {
                    $playerCards[] = array_shift($deck);
                }
            }
            $player->receiveCards($playerCards);
        }
    }

    /**
     * üéØ –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–æ–ª–æ–¥—É (21 –∫–∞—Ä—Ç–∞)
     */
    private function createSimplifiedDeck(): array
    {
        $deck = [];
        
        // üéØ 4 –¥–µ—Å—è—Ç–∫–∏
        foreach (CardSuit::cases() as $suit) {
            $deck[] = new Card($suit, CardRank::TEN);
        }
        
        // üéØ 4 –≤–∞–ª—å—Ç–∞
        foreach (CardSuit::cases() as $suit) {
            $deck[] = new Card($suit, CardRank::JACK);
        }
        
        // üéØ 4 –¥–∞–º—ã
        foreach (CardSuit::cases() as $suit) {
            $deck[] = new Card($suit, CardRank::QUEEN);
        }
        
        // üéØ 4 –∫–æ—Ä–æ–ª—è
        foreach (CardSuit::cases() as $suit) {
            $deck[] = new Card($suit, CardRank::KING);
        }
        
        // üéØ 4 —Ç—É–∑–∞
        foreach (CardSuit::cases() as $suit) {
            $deck[] = new Card($suit, CardRank::ACE);
        }
        
        // üéØ 1 –¥–∂–æ–∫–µ—Ä (6 –∫—Ä–µ—Å—Ç–µ–π)
        $deck[] = new Card(CardSuit::CLUBS, CardRank::SIX); // –î–∂–æ–∫–µ—Ä
        
        // üéØ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        shuffle($deck);
        
        return $deck;
    }

    /**
     * üéØ –ü–µ—Ä–µ—Ä–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã (–¥–ª—è —Å–≤–∞—Ä—ã)
     */
    public function redistributeForQuarrel(array $players): void
    {
        $deck = $this->createSimplifiedDeck();
        
        foreach ($players as $player) {
            $player->receiveCards([]); // üéØ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã
            
            $newCards = [];
            for ($i = 0; $i < 3; $i++) {
                if (!empty($deck)) {
                    $newCards[] = array_shift($deck);
                }
            }
            $player->receiveCards($newCards);
        }
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
     */
    public function getDeckInfo(): array
    {
        $deck = $this->createSimplifiedDeck();
        
        return [
            'total_cards' => count($deck),
            'cards_per_suit' => $this->countCardsPerSuit($deck),
            'has_joker' => $this->hasJoker($deck)
        ];
    }

    private function countCardsPerSuit(array $deck): array
    {
        $counts = [];
        foreach (CardSuit::cases() as $suit) {
            $counts[$suit->value] = 0;
        }
        
        foreach ($deck as $card) {
            if (!$card->isJoker() && $card->getSuit()) {
                $counts[$card->getSuit()->value]++;
            }
        }
        
        return $counts;
    }

    private function hasJoker(array $deck): bool
    {
        foreach ($deck as $card) {
            if ($card->isJoker()) {
                return true;
            }
        }
        return false;
    }
}