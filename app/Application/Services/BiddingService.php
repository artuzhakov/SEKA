<?php

declare(strict_types=1);

namespace App\Application\Services;

use App\Domain\Game\Entities\Game;
use App\Domain\Game\Entities\Player;
use App\Domain\Game\Enums\PlayerAction;
use App\Domain\Game\Enums\PlayerStatus;
use DomainException;

class BiddingService
{
    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–æ—Ä–≥–∞—Ö
     */
    public function processPlayerAction(
        Game $game, 
        Player $player, 
        PlayerAction $action, 
        ?int $betAmount = null
    ): void {
        // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        if (!$player->isPlaying()) {
            throw new DomainException('Player cannot make moves');
        }

        // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (!$this->isPlayerTurn($game, $player)) {
            throw new DomainException('Not your turn');
        }

        // üéØ –û–ë–ù–û–í–õ–Ø–ï–ú –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        $player->updateLastActionTime();

        match ($action) {
            PlayerAction::FOLD => $this->processFold($player),
            PlayerAction::RAISE => $this->processRaise($player, $betAmount, $game),
            PlayerAction::CALL => $this->processCall($player, $game),
            PlayerAction::CHECK => $this->processCheck($player, $game),
            PlayerAction::REVEAL => $this->processReveal($player, $game),
            PlayerAction::DARK => $this->processDark($player),
            PlayerAction::OPEN => $this->processOpen($player),
            default => throw new DomainException('Unknown player action')
        };

        // üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        $this->moveToNextPlayer($game);
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     */
    private function isPlayerTurn(Game $game, Player $player): bool
    {
        $currentPosition = $game->getCurrentPlayerPosition();
        return $currentPosition === $player->getPosition();
    }

    /**
     * üéØ –ü–∞—Å - –∏–≥—Ä–æ–∫ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    private function processFold(Player $player): void
    {
        $player->fold();
    }

    /**
     * üéØ –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
     */
    private function processRaise(Player $player, ?int $betAmount, Game $game): void
    {
        if ($betAmount === null) {
            throw new DomainException('Bet amount required for raise');
        }

        // üéØ –î–ª—è —Ç–µ–º–Ω—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–≤–∫–∞ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
        $effectiveBet = $player->getStatus() === PlayerStatus::DARK 
            ? (int)($betAmount / 2)
            : $betAmount;

        // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
        if ($player->getBalance() < $effectiveBet) {
            throw new DomainException('Insufficient funds');
        }

        $player->placeBet($effectiveBet);
        $game->setCurrentMaxBet($effectiveBet);
    }

    /**
     * üéØ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–≤–∫–∏
     */
    private function processCall(Player $player, Game $game): void
    {
        $currentMaxBet = $game->getCurrentMaxBet();
        $playerBet = $player->getCurrentBet();
        
        if ($currentMaxBet > $playerBet) {
            $amountToCall = $currentMaxBet - $playerBet;
            
            // üéØ –î–ª—è —Ç–µ–º–Ω—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–≤–∫–∞ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
            if ($player->getStatus() === PlayerStatus::DARK) {
                $amountToCall = (int)($amountToCall / 2);
            }

            if ($player->getBalance() < $amountToCall) {
                throw new DomainException('Insufficient funds to call');
            }

            $player->placeBet($amountToCall);
        }
    }

    /**
     * üéØ –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫)
     */
    private function processCheck(Player $player, Game $game): void
    {
        $currentMaxBet = $game->getCurrentMaxBet();
        $playerBet = $player->getCurrentBet();
        
        if ($currentMaxBet > $playerBet) {
            throw new DomainException('Cannot check when there is a bet to call');
        }
        
        // üéØ Check –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
    }

    /**
     * üéØ –í—Å–∫—Ä—ã—Ç–∏–µ - —Å—Ç–∞–≤–∫–∞ –≤ 2x –æ—Ç —Ç–µ–∫—É—â–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
     */
    private function processReveal(Player $player, Game $game): void
    {
        $currentMaxBet = $game->getCurrentMaxBet();
        $revealBet = $currentMaxBet * 2;
        
        if ($player->getBalance() < $revealBet) {
            throw new DomainException('Insufficient funds for reveal');
        }

        $player->placeBet($revealBet);
        $player->reveal();
        $game->setCurrentMaxBet($revealBet);
    }

    /**
     * üéØ –ò–≥—Ä–∞ –≤ —Ç–µ–º–Ω—É—é
     */
    private function processDark(Player $player): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–æ–∫ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        if ($player->getCurrentBet() > 0) {
            throw new DomainException('Cannot play dark after making a bet');
        }
        
        $player->playDark();
    }

    /**
     * üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç –ø–æ—Å–ª–µ —Ç–µ–º–Ω–æ–π –∏–≥—Ä—ã
     */
    private function processOpen(Player $player): void
    {
        if ($player->getStatus() !== PlayerStatus::DARK) {
            throw new DomainException('Can only open cards after playing dark');
        }
        
        $player->openCards();
    }

    /**
     * üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
     */
    private function moveToNextPlayer(Game $game): void
    {
        $activePlayers = $game->getActivePlayers();
        $currentPosition = $game->getCurrentPlayerPosition();
        
        if (empty($activePlayers)) {
            return;
        }
        
        // üéØ –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        $currentIndex = null;
        foreach ($activePlayers as $index => $player) {
            if ($player->getPosition() === $currentPosition) {
                $currentIndex = $index;
                break;
            }
        }
        
        if ($currentIndex !== null) {
            // üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
            $nextIndex = ($currentIndex + 1) % count($activePlayers);
            $nextPlayer = $activePlayers[$nextIndex];
            $game->setCurrentPlayerPosition($nextPlayer->getPosition());
            
            // üéØ –û–ë–ù–û–í–õ–Ø–ï–ú –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            $nextPlayer->updateLastActionTime();
        }
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤
     */
    public function isBiddingRoundComplete(Game $game): bool
    {
        $activePlayers = $game->getActivePlayers();
        
        // –û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ - –∫—Ä—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
        if (count($activePlayers) <= 1) {
            return true;
        }
        
        $currentBet = $game->getCurrentMaxBet();
        $allActionsCompleted = true;
        
        foreach ($activePlayers as $player) {
            // –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∫—Ä—É–≥ –µ—Å–ª–∏:
            // - –ï–≥–æ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–≤–Ω–∞ —Ç–µ–∫—É—â–µ–π –ò –æ–Ω –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥
            // - –ò–õ–ò –æ–Ω –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ (–Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏)
            if ($player->getCurrentBet() !== $currentBet && !$player->hasChecked()) {
                $allActionsCompleted = false;
                break;
            }
        }
        
        return $allActionsCompleted;
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public function getCurrentPlayer(Game $game): ?Player
    {
        $currentPosition = $game->getCurrentPlayerPosition();
        if (!$currentPosition) {
            return null;
        }

        foreach ($game->getPlayers() as $player) {
            if ($player->getPosition() === $currentPosition && $player->isPlaying()) {
                return $player;
            }
        }

        return null;
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ö–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public function getRemainingTurnTime(Game $game): ?int
    {
        $currentPlayer = $this->getCurrentPlayer($game);
        return $currentPlayer ? $currentPlayer->getRemainingTurnTime() : null;
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Ö–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public function isCurrentPlayerTurnTimedOut(Game $game): bool
    {
        $currentPlayer = $this->getCurrentPlayer($game);
        return $currentPlayer ? $currentPlayer->isTurnTimedOut() : false;
    }

    /**
     * üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–π–º–∞—É—Ç —Ö–æ–¥–∞
     */
    public function processTurnTimeout(Game $game): void
    {
        $currentPlayer = $this->getCurrentPlayer($game);
        
        if ($currentPlayer && $currentPlayer->isTurnTimedOut()) {
            $this->processPlayerAction($game, $currentPlayer, PlayerAction::FOLD);
        }
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –∫—Ä—É–≥–∞
     */
    public function getAvailableActions(Game $game, Player $player): array
    {
        $currentRound = $game->getCurrentRound();
        $isRightOfDealer = $this->isPlayerRightOfDealer($game, $player);
        
        $actions = [PlayerAction::FOLD, PlayerAction::CALL, PlayerAction::RAISE];
        
        // –ö—Ä—É–≥ 1: –ü–†–û–ü–£–°–¢–ò–¢–¨ –∏ –¢–ï–ú–ù–ê–Ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞
        if ($currentRound === 1 && $isRightOfDealer && !$player->hasChecked()) {
            $actions[] = PlayerAction::CHECK;
            
            // –¢–ï–ú–ù–ê–Ø –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ —Ç–µ–º–Ω—É—é –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
            if (!$player->hasPlayedDark() && !$this->hasAnyPlayerPlayedDark($game)) {
                $actions[] = PlayerAction::DARK;
            }
        }
        
        // –ö—Ä—É–≥–∏ 2-3: –í–°–ö–†–´–¢–ò–ï –¥–æ—Å—Ç—É–ø–Ω–æ, –ü–†–û–ü–£–°–¢–ò–¢–¨/–¢–ï–ú–ù–ê–Ø –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        if ($currentRound >= 2) {
            $actions[] = PlayerAction::REVEAL;
            
            // –û–¢–ö–†–´–¢–¨ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º–Ω—è—â–∏–º –∏–≥—Ä–æ–∫–∞–º
            if ($player->getStatus() === PlayerStatus::DARK) {
                $actions[] = PlayerAction::OPEN;
            }
        }
        
        return $actions;
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤ –∏–≥—Ä–µ —Ç–µ–º–Ω—è—â–∏–µ –∏–≥—Ä–æ–∫–∏
     */
    private function hasAnyPlayerPlayedDark(Game $game): bool
    {
        foreach ($game->getPlayers() as $player) {
            if ($player->hasPlayedDark()) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞
     */
    private function isPlayerRightOfDealer(Game $game, Player $player): bool
    {
        $rightPlayer = $game->getPlayerRightOfDealer();
        return $rightPlayer && $rightPlayer->getId()->equals($player->getId());
    }

    public function shouldEndBiddingRound(Game $game): bool
    {
        $activePlayers = $game->getActivePlayers();
        
        // –û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫
        if (count($activePlayers) <= 1) {
            return true;
        }
        
        // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ò –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥
        $currentBet = $game->getCurrentMaxBet();
        $allBetsEqual = true;
        
        foreach ($activePlayers as $player) {
            if ($player->getCurrentBet() !== $currentBet && !$player->hasChecked()) {
                $allBetsEqual = false;
                break;
            }
        }
        
        return $allBetsEqual;
    }

    /**
     * üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä—É–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤
     */
    public function moveToNextRound(Game $game): void
    {
        $currentRound = $game->getCurrentRound();
        
        if ($currentRound < 3) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä—É–≥—É
            $game->setCurrentRound($currentRound + 1);
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞
            foreach ($game->getActivePlayers() as $player) {
                $player->resetForNewBiddingRound();
            }
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞)
            $this->setFirstPlayerOfRound($game);
            
        } else {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –∫–∞—Ä—Ç
            $this->finishBiddingPhase($game);
        }
    }

    /**
     * üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫—Ä—É–≥–∞ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞)
     */
    private function setFirstPlayerOfRound(Game $game): void
    {
        $rightPlayer = $game->getPlayerRightOfDealer();
        if ($rightPlayer) {
            $game->setCurrentPlayerPosition($rightPlayer->getPosition());
        }
    }

    /**
     * üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ç–æ—Ä–≥–æ–≤
     */
    private function finishBiddingPhase(Game $game): void
    {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        $game->setStatus(GameStatus::FINISHED);
    }

}