<?php

declare(strict_types=1);

namespace App\Application\Services;

use App\Domain\Game\Entities\Game;
use App\Domain\Game\Entities\Player;
use App\Domain\Game\Enums\PlayerAction;
use App\Domain\Game\Enums\PlayerStatus;
use App\Domain\Game\Enums\GameStatus;
use DomainException;

class BiddingService
{
    
    /**
     * üéØ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–æ—Ä–≥–∞—Ö (–í–ï–†–°–ò–Ø –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    public function processPlayerAction(
        Game $game, 
        Player $player, 
        PlayerAction $action, 
        ?int $betAmount = null
    ): void {
        \Log::info("üéØ === BIDDING ACTION START ===");
        \Log::info("üéØ Game: {$game->getId()->toInt()}, Status: {$game->getStatus()->value}");
        \Log::info("üéØ Current Player Position Before: {$game->getCurrentPlayerPosition()}");
        \Log::info("üéØ Action: {$action->value}, Bet: " . ($betAmount ?? 'null'));
        
        try {
            // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
            if (!$player->isPlaying()) {
                \Log::error("‚ùå Player {$player->getUserId()} cannot make moves - not playing");
                throw new DomainException('Player cannot make moves');
            }

            // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if (!$this->isPlayerTurn($game, $player)) {
                \Log::error("‚ùå Not player {$player->getUserId()} turn. Current turn: {$game->getCurrentPlayerPosition()}");
                throw new DomainException('Not your turn');
            }

            \Log::info("‚úÖ Player {$player->getUserId()} can make action: {$action->value}");

            // üéØ –û–ë–ù–û–í–õ–Ø–ï–ú –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            $player->updateLastActionTime();

            // üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            match ($action) {
                PlayerAction::FOLD => $this->processFold($player, $game),
                PlayerAction::RAISE => $this->processRaise($player, $betAmount, $game),
                PlayerAction::CALL => $this->processCall($player, $game),
                PlayerAction::CHECK => $this->processCheck($player, $game),
                PlayerAction::REVEAL => $this->processReveal($player, $game),
                PlayerAction::DARK => $this->processDark($player, $game),
                PlayerAction::OPEN => $this->processOpen($player, $game),
                default => throw new DomainException('Unknown player action')
            };

            \Log::info("‚úÖ Successfully processed action: {$action->value}");

            // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
            if ($game->getStatus() === GameStatus::BIDDING) {
                $activePlayers = $game->getActivePlayers();
                \Log::info("üîç Active players after action: " . count($activePlayers));
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
                if (count($activePlayers) > 1) {
                    $this->moveToNextPlayer($game);
                    \Log::info("‚úÖ Moved to next player. New position: {$game->getCurrentPlayerPosition()}");
                } else {
                    \Log::info("üéØ Game round ending - skipping move to next player");
                    $this->endBiddingRound($game);
                }
            } else {
                \Log::info("üéØ Game status changed to {$game->getStatus()->value} - skipping move to next player");
            }

            \Log::info("üéØ === BIDDING ACTION END ===\n");

        } catch (\Exception $e) {
            \Log::error("‚ùå BIDDING ACTION FAILED for player {$player->getUserId()}");
            \Log::error("‚ùå Action: {$action->value}, Error: " . $e->getMessage());
            throw $e;
        }
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function isPlayerTurn(Game $game, Player $player): bool
    {
        $currentPosition = $game->getCurrentPlayerPosition();
        $playerPosition = $player->getPosition();
        $isTurn = $currentPosition === $playerPosition;
        
        \Log::info("üîç isPlayerTurn: player={$player->getUserId()}, playerPos={$playerPosition}, currentPos={$currentPosition}, isTurn=" . ($isTurn ? 'YES' : 'NO'));
        
        return $isTurn;
    }

    /**
     * üéØ –ü–∞—Å - –∏–≥—Ä–æ–∫ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processFold(Player $player, Game $game): void
    {
        \Log::info("üîÑ Processing FOLD for player {$player->getUserId()}");
        $player->fold();
        \Log::info("‚úÖ Player {$player->getUserId()} folded");
        $this->saveGame($game);
    }

    /**
     * üéØ –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processRaise(Player $player, ?int $betAmount, Game $game): void
    {
        \Log::info("üîÑ Processing RAISE for player {$player->getUserId()}, amount: {$betAmount}");
        
        if ($betAmount === null) {
            throw new DomainException('Bet amount required for raise');
        }

        // üéØ –î–ª—è —Ç–µ–º–Ω—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–≤–∫–∞ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
        $effectiveBet = $player->getStatus() === PlayerStatus::DARK 
            ? (int)($betAmount / 2)
            : $betAmount;

        \Log::info("üí∞ Effective bet for player {$player->getUserId()}: {$effectiveBet} (dark: " . ($player->getStatus() === PlayerStatus::DARK ? 'YES' : 'NO') . ")");

        $player->placeBet($effectiveBet);
        $game->setCurrentMaxBet($effectiveBet);
        
        \Log::info("‚úÖ Player {$player->getUserId()} raised to {$effectiveBet}");

        $this->saveGame($game);
    }

    /**
     * üéØ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–≤–∫–∏ (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processCall(Player $player, Game $game): void
    {
        \Log::info("üîÑ Processing CALL for player {$player->getUserId()}");
        
        $currentMaxBet = $game->getCurrentMaxBet();
        $playerBet = $player->getCurrentBet();
        
        \Log::info("üí∞ Call details: maxBet={$currentMaxBet}, playerBet={$playerBet}");
        
        if ($currentMaxBet > $playerBet) {
            $amountToCall = $currentMaxBet - $playerBet;
            
            // üéØ –î–ª—è —Ç–µ–º–Ω—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–≤–∫–∞ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
            if ($player->getStatus() === PlayerStatus::DARK) {
                $amountToCall = (int)($amountToCall / 2);
                \Log::info("üí∞ Dark player - half call amount: {$amountToCall}");
            }

            $player->placeBet($amountToCall);
            \Log::info("‚úÖ Player {$player->getUserId()} called with {$amountToCall}");
        } else {
            \Log::info("‚úÖ Player {$player->getUserId()} call skipped - already at max bet");
        }

        $this->saveGame($game);
    }

    /**
     * üéØ –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫) (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processCheck(Player $player, Game $game): void
    {
        \Log::info("üîÑ Processing CHECK for player {$player->getUserId()}");
        
        $currentMaxBet = $game->getCurrentMaxBet();
        $playerBet = $player->getCurrentBet();
        
        \Log::info("üí∞ Check details: maxBet={$currentMaxBet}, playerBet={$playerBet}");
        
        if ($currentMaxBet > $playerBet) {
            \Log::error("‚ùå Cannot check when there is a bet to call");
            throw new DomainException('Cannot check when there is a bet to call');
        }
        
        // üéØ –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∏–ª
        $player->setChecked(true);
        \Log::info("‚úÖ Player {$player->getUserId()} checked");

        $this->saveGame($game);
    }

    /**
     * üéØ –í—Å–∫—Ä—ã—Ç–∏–µ - —Å—Ç–∞–≤–∫–∞ –≤ 2x –æ—Ç —Ç–µ–∫—É—â–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processReveal(Player $player, Game $game): void
    {
        \Log::info("üîÑ Processing REVEAL for player {$player->getUserId()}");
        
        $currentMaxBet = $game->getCurrentMaxBet();
        $revealBet = $currentMaxBet * 2;
        
        \Log::info("üí∞ Reveal details: currentMaxBet={$currentMaxBet}, revealBet={$revealBet}, balance={$player->getBalance()}");
        
        if ($player->getBalance() < $revealBet) {
            \Log::error("‚ùå Insufficient funds for reveal: balance={$player->getBalance()}, needed={$revealBet}");
            throw new DomainException('Insufficient funds for reveal');
        }

        $player->placeBet($revealBet);
        $player->reveal();
        $game->setCurrentMaxBet($revealBet);
        
        \Log::info("‚úÖ Player {$player->getUserId()} revealed with bet {$revealBet}");

        $this->saveGame($game);
    }

    /**
     * üéØ –ò–≥—Ä–∞ –≤ —Ç–µ–º–Ω—É—é (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processDark(Player $player, Game $game): void
    {
        \Log::info("üîÑ Processing DARK for player {$player->getUserId()}");

        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –∏–≥—Ä–∞—Ç—å –≤ —Ç–µ–º–Ω—É—é –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω—Ç–µ
        $currentBet = $player->getCurrentBet();
        \Log::info("üí∞ DARK action - current bet: {$currentBet}");
        
        // üéØ –í–ê–ñ–ù–û: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É - –∞–Ω—Ç–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è!
        // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å DARK
        $player->playDark();
        \Log::info("‚úÖ Player {$player->getUserId()} played dark successfully");

        $this->saveGame($game);
    }

    /**
     * üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç –ø–æ—Å–ª–µ —Ç–µ–º–Ω–æ–π –∏–≥—Ä—ã (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú)
     */
    private function processOpen(Player $player, Game $game): void
    {
        \Log::info("üîÑ Processing OPEN for player {$player->getUserId()}");

        if ($player->getStatus() !== PlayerStatus::DARK) {
            \Log::error("‚ùå Can only open cards after playing dark. Current status: {$player->getStatus()->value}");
            throw new DomainException('Can only open cards after playing dark');
        }
        
        $player->openCards();
        \Log::info("‚úÖ Player {$player->getUserId()} opened cards");

        $this->saveGame($game);
    }

    /**
     * üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú) - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    private function moveToNextPlayer(Game $game): void
    {
        $activePlayers = $game->getActivePlayers();
        $currentPosition = $game->getCurrentPlayerPosition();
        
        \Log::info("üîÑ moveToNextPlayer: currentPosition={$currentPosition}, activePlayers=" . count($activePlayers));
        
        // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –î–û –ª—é–±—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (empty($activePlayers)) {
            \Log::info("üéØ No active players left - ending bidding round");
            $this->endBiddingRound($game);
            return;
        }
        
        // üéØ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ - –æ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        if (count($activePlayers) === 1) {
            \Log::info("üéØ Only one active player remaining - they win automatically!");
            $this->endBiddingRound($game);
            return;
        }
        
        // üéØ –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        $currentIndex = null;
        $activePlayersArray = array_values($activePlayers); // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
        
        foreach ($activePlayersArray as $index => $player) {
            if ($player->getPosition() === $currentPosition) {
                $currentIndex = $index;
                break;
            }
        }
        
        \Log::info("üîç Current player index: " . ($currentIndex ?? 'NOT FOUND'));
        
        if ($currentIndex !== null) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
            $nextIndex = ($currentIndex + 1) % count($activePlayersArray);
            $nextPlayer = $activePlayersArray[$nextIndex];
            $game->setCurrentPlayerPosition($nextPlayer->getPosition());
            
            \Log::info("‚úÖ Moving to next player: position={$nextPlayer->getPosition()}");
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            \Log::info("üîÑ Current player not active, selecting first active player");
            
            // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç
            if (count($activePlayersArray) > 0) {
                $firstPlayer = $activePlayersArray[0];
                $game->setCurrentPlayerPosition($firstPlayer->getPosition());
                \Log::info("‚úÖ Selected first active player: position={$firstPlayer->getPosition()}");
            } else {
                \Log::error("‚ùå CRITICAL: No active players available when trying to select first player");
                $this->endBiddingRound($game);
                return;
            }
        }
        
        // üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        $this->saveGame($game);
    }

    /**
     * üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤
     */
    private function endBiddingRound(Game $game): void
    {
        $activePlayers = $game->getActivePlayers();
        
        \Log::info("üéØ Ending bidding round. Active players: " . count($activePlayers));
        
        if (count($activePlayers) === 1) {
            // –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–ª—Å—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞
            $winner = array_values($activePlayers)[0]; // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
            // $game->setWinner($winner); // üéØ –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú - –º–µ—Ç–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ—Ç
            $game->setStatus(GameStatus::FINISHED);
            \Log::info("üéâ Player {$winner->getUserId()} wins automatically!");
        } elseif (count($activePlayers) > 1) {
            // –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –∫–∞—Ä—Ç
            $game->setStatus(GameStatus::COMPARISON);
            \Log::info("üîç Multiple players remain - moving to card comparison");
        } else {
            // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ - –Ω–∏—á—å—è
            $game->setStatus(GameStatus::FINISHED);
            \Log::info("ü§ù No active players - game ended in draw");
        }
        
        $this->saveGame($game);
    }

    // üéØ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã
    private function saveGame(Game $game): void
    {
        $repository = new \App\Domain\Game\Repositories\CachedGameRepository();
        $repository->save($game);
        \Log::info("üíæ Game saved after player action");
    }

    // –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–º —Ñ–∞–π–ª–µ
    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤
     */
    public function isBiddingRoundComplete(Game $game): bool
    {
        $activePlayers = $game->getActivePlayers();
        
        // –û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ - –∫—Ä—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
        if (count($activePlayers) <= 1) {
            return true;
        }
        
        $currentBet = $game->getCurrentMaxBet();
        $allActionsCompleted = true;
        
        foreach ($activePlayers as $player) {
            // –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∫—Ä—É–≥ –µ—Å–ª–∏:
            // - –ï–≥–æ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–≤–Ω–∞ —Ç–µ–∫—É—â–µ–π –ò –æ–Ω –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥
            // - –ò–õ–ò –æ–Ω –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ (–Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏)
            if ($player->getCurrentBet() !== $currentBet && !$player->hasChecked()) {
                $allActionsCompleted = false;
                break;
            }
        }
        
        return $allActionsCompleted;
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public function getCurrentPlayer(Game $game): ?Player
    {
        $currentPosition = $game->getCurrentPlayerPosition();
        if (!$currentPosition) {
            return null;
        }

        foreach ($game->getPlayers() as $player) {
            if ($player->getPosition() === $currentPosition && $player->isPlaying()) {
                return $player;
            }
        }

        return null;
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ö–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public function getRemainingTurnTime(Game $game): ?int
    {
        $currentPlayer = $this->getCurrentPlayer($game);
        return $currentPlayer ? $currentPlayer->getRemainingTurnTime() : null;
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∞—É—Ç —Ö–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public function isCurrentPlayerTurnTimedOut(Game $game): bool
    {
        $currentPlayer = $this->getCurrentPlayer($game);
        return $currentPlayer ? $currentPlayer->isTurnTimedOut() : false;
    }

    /**
     * üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–π–º–∞—É—Ç —Ö–æ–¥–∞
     */
    public function processTurnTimeout(Game $game): void
    {
        $currentPlayer = $this->getCurrentPlayer($game);
        
        if ($currentPlayer && $currentPlayer->isTurnTimedOut()) {
            $this->processPlayerAction($game, $currentPlayer, PlayerAction::FOLD);
        }
    }

    /**
     * üéØ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –∫—Ä—É–≥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
     */
    public function getAvailableActions(Game $game, Player $player): array
    {
        $currentRound = $game->getCurrentRound();
        $currentMaxBet = $game->getCurrentMaxBet();
        $playerBet = $player->getCurrentBet();
        
        \Log::info("üîç getAvailableActions - Round: {$currentRound}, MaxBet: {$currentMaxBet}, PlayerBet: {$playerBet}");

        $actions = [PlayerAction::FOLD, PlayerAction::CALL, PlayerAction::RAISE, PlayerAction::OPEN];
        
        // üéØ CHECK –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        if ($currentMaxBet === $playerBet) {
            $actions[] = PlayerAction::CHECK;
            \Log::info("‚úÖ CHECK added - no bet to call");
        }
        
        // üéØ DARK –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫—Ä—É–≥–µ 1 –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ —Ç–µ–º–Ω—É—é
        if ($currentRound === 1 && !$player->hasPlayedDark()) {
            $actions[] = PlayerAction::DARK;
            \Log::info("‚úÖ DARK added - round 1 and not played dark yet");
        }
        
        // üéØ REVEAL –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫—Ä—É–≥–∞—Ö 2-3
        if ($currentRound >= 2) {
            $actions[] = PlayerAction::REVEAL;
            \Log::info("‚úÖ REVEAL added - round {$currentRound}");
        }
        
        $actionValues = array_map(fn($a) => $a->value, $actions);
        \Log::info("üéØ Final available actions: " . implode(', ', $actionValues));
        
        return $actions;
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤ –∏–≥—Ä–µ —Ç–µ–º–Ω—è—â–∏–µ –∏–≥—Ä–æ–∫–∏
     */
    private function hasAnyPlayerPlayedDark(Game $game): bool
    {
        foreach ($game->getPlayers() as $player) {
            if ($player->hasPlayedDark()) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞
     */
    private function isPlayerRightOfDealer(Game $game, Player $player): bool
    {
        $rightPlayer = $game->getPlayerRightOfDealer();
        return $rightPlayer && $rightPlayer->getId()->equals($player->getId());
    }

    public function shouldEndBiddingRound(Game $game): bool
    {
        $activePlayers = $game->getActivePlayers();
        
        // –û—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫
        if (count($activePlayers) <= 1) {
            return true;
        }
        
        // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ò –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥
        $currentBet = $game->getCurrentMaxBet();
        $allBetsEqual = true;
        
        foreach ($activePlayers as $player) {
            if ($player->getCurrentBet() !== $currentBet && !$player->hasChecked()) {
                $allBetsEqual = false;
                break;
            }
        }
        
        return $allBetsEqual;
    }

    /**
     * üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä—É–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤
     */
    public function moveToNextRound(Game $game): void
    {
        $currentRound = $game->getCurrentRound();
        
        if ($currentRound < 3) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä—É–≥—É
            $game->setCurrentRound($currentRound + 1);
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞
            foreach ($game->getActivePlayers() as $player) {
                $player->resetForNewBiddingRound();
            }
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞)
            $this->setFirstPlayerOfRound($game);
            
        } else {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –∫–∞—Ä—Ç
            $this->finishBiddingPhase($game);
        }
    }

    /**
     * üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫—Ä—É–≥–∞ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∏–ª–µ—Ä–∞)
     */
    private function setFirstPlayerOfRound(Game $game): void
    {
        $rightPlayer = $game->getPlayerRightOfDealer();
        if ($rightPlayer) {
            $game->setCurrentPlayerPosition($rightPlayer->getPosition());
        }
    }

    /**
     * üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ç–æ—Ä–≥–æ–≤
     */
    private function finishBiddingPhase(Game $game): void
    {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        $game->setStatus(GameStatus::FINISHED);
    }

    /**
     * üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—É–Ω–¥ —Ç–æ—Ä–≥–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
     */
    public function startBiddingRound(Game $game): void
    {
        \Log::info("üéØ BiddingService: Starting bidding round for game: " . $game->getId()->toInt());

        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–Ω–∫ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É - –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–Ω—Ç–µ
        $currentBank = $game->getBank();
        $currentMaxBet = $game->getCurrentMaxBet();
        
        \Log::info("üí∞ Game bank: {$currentBank}, max bet: {$currentMaxBet}");

        // üéØ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–≤–µ—Ä–∫–∏, –ù–ï —Å—Ç–∞–≤–∫–∏
        foreach ($game->getActivePlayers() as $player) {
            $player->setChecked(false);
            
            // üéØ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ - –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω—Ç–µ
            // $player->resetCurrentBet(); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£!
            
            if (method_exists($player, 'resetForNewBiddingRound')) {
                $player->resetForNewBiddingRound();
            }
        }
        
        // üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        $firstPlayerPosition = $game->getCurrentPlayerPosition();
        if (!$firstPlayerPosition) {
            $activePlayers = $game->getActivePlayers();
            if (!empty($activePlayers)) {
                $firstPlayer = $activePlayers[array_rand($activePlayers)];
                $firstPlayerPosition = $firstPlayer->getPosition();
                $game->setCurrentPlayerPosition($firstPlayerPosition);
            }
        }
        
        // üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ BIDDING
        $game->startBidding();
        
        \Log::info("üéØ BiddingService: Round started. First player: {$firstPlayerPosition}, Bank: {$currentBank}, Max bet: {$currentMaxBet}");
    }

}