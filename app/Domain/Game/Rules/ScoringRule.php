<?php
// app/Domain/Game/Rules/ScoringRule.php

declare(strict_types=1);

namespace App\Domain\Game\Rules;

use App\Domain\Game\Entities\Card;
use App\Domain\Game\Enums\CardRank;

class ScoringRule
{
    public function calculateScore(array $cards): int
    {
        // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–∞—Ä—Ç—ã
        if (empty($cards)) {
            return 0;
        }
        
        // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ –∫–∞—Ä—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
        $validCards = array_filter($cards, function ($card) {
            if ($card instanceof Card) {
                return true;
            }
            return isset($card['rank']) || isset($card['value']) || isset($card['suit']);
        });
        
        if (empty($validCards)) {
            return 0;
        }
        
        $jokerCount = $this->countJokers($validCards);
        $aceCount = $this->countAces($validCards);
        $sameSuitCount = $this->countSameSuit($validCards);
        $sameRankCount = $this->countSameRank($validCards);

        // üéØ –°–ï–ö–ê –¢–£–ó–û–í (37 –æ—á–∫–æ–≤)
        if ($this->isSekaAces($cards, $jokerCount, $aceCount)) {
            return 37;
        }
        
        // üéØ –°–ï–ö–ê –ö–û–†–û–õ–ï–ô (36 –æ—á–∫–æ–≤)
        if ($this->isSekaKings($cards, $jokerCount)) {
            return 36;
        }
        
        // üéØ –°–ï–ö–ê –î–ê–ú (35 –æ—á–∫–æ–≤)
        if ($this->isSekaQueens($cards, $jokerCount)) {
            return 35;
        }
        
        // üéØ –°–ï–ö–ê –í–ê–õ–¨–¢–û–í (34 –æ—á–∫–æ–≤)
        if ($this->isSekaJacks($cards, $jokerCount)) {
            return 34;
        }
        
        // üéØ –°–ï–ö–ê –î–ï–°–Ø–¢–û–ö (33 –æ—á–∫–æ–≤)
        if ($this->isSekaTens($cards, $jokerCount)) {
            return 33;
        }
        
        // üéØ –¢—Ä–∏ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ + –¢—É–∑ + –î–∂–æ–∫–µ—Ä (32 –æ—á–∫–∞)
        if ($sameSuitCount === 3 && $aceCount > 0 && $jokerCount > 0) {
            return 32;
        }
        
        // üéØ –¢—Ä–∏ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ + –¢—É–∑ –ò–õ–ò –î–∂–æ–∫–µ—Ä (31 –æ—á–∫–æ)
        if ($sameSuitCount === 3 && ($aceCount > 0 || $jokerCount > 0)) {
            return 31;
        }
        
        // üéØ –°–ï–ö–ê –ú–ê–°–¢–ï–ô (30 –æ—á–∫–æ–≤)
        if ($sameSuitCount === 3) {
            return 30;
        }
        
        // üéØ –î–í–ê –õ–ë–ê (22 –æ—á–∫–∞) - –¥–≤–∞ —Ç—É–∑–∞
        if ($aceCount === 2) {
            return 22;
        }
        
        // üéØ 21 –æ—á–∫–æ - –¢—É–∑ + –î–∂–æ–∫–µ—Ä –ò–õ–ò –¥–≤–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ + –¢—É–∑
        if (($aceCount === 1 && $jokerCount === 1) || 
            ($sameSuitCount === 2 && $aceCount === 1)) {
            return 21;
        }
        
        // üéØ 20 –æ—á–∫–æ–≤ - –¥–≤–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏
        if ($sameSuitCount === 2) {
            return 20;
        }
        
        // üéØ 11 –æ—á–∫–æ–≤ - –µ—Å—Ç—å —Ç—É–∑
        if ($aceCount > 0) {
            return 11;
        }
        
        // üéØ 10 –æ—á–∫–æ–≤ - –±–∞–∑–æ–≤—ã–µ
        return 10;
    }
    
    private function isSekaAces(array $cards, int $jokerCount, int $aceCount): bool
    {
        return ($aceCount === 3) || ($aceCount === 2 && $jokerCount === 1);
    }
    
    private function isSekaKings(array $cards, int $jokerCount): bool
    {
        $kingCount = $this->countRank($cards, CardRank::KING);
        return ($kingCount === 3) || ($kingCount === 2 && $jokerCount === 1);
    }
    
    private function isSekaQueens(array $cards, int $jokerCount): bool
    {
        $queenCount = $this->countRank($cards, CardRank::QUEEN);
        return ($queenCount === 3) || ($queenCount === 2 && $jokerCount === 1);
    }
    
    private function isSekaJacks(array $cards, int $jokerCount): bool
    {
        $jackCount = $this->countRank($cards, CardRank::JACK);
        return ($jackCount === 3) || ($jackCount === 2 && $jokerCount === 1);
    }
    
    private function isSekaTens(array $cards, int $jokerCount): bool
    {
        $tenCount = $this->countRank($cards, CardRank::TEN);
        return ($tenCount === 3) || ($tenCount === 2 && $jokerCount === 1);
    }
    
    private function countJokers(array $cards): int
    {
        if (empty($cards)) return 0;
        
        return count(array_filter($cards, function ($card) {
            if ($card instanceof Card) {
                return $card->isJoker();
            }
            // üéØ –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤
            return ($card['is_joker'] ?? $card['joker'] ?? false) === true;
        }));
    }
    
    private function countAces(array $cards): int
    {
        if (empty($cards)) return 0;
        
        return count(array_filter($cards, function ($card) {
            if ($card instanceof Card) {
                return $card->isAce();
            }
            // üéØ –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤
            $rank = $card['rank'] ?? $card['value'] ?? null;
            return $rank === 'A' || $rank === 'ACE';
        }));
    }
    
    private function countSameSuit(array $cards): int
    {
        $suits = [];
        foreach ($cards as $card) {
            // üéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
            if ($card instanceof Card) {
                $suit = $card->getSuit()->value ?? null;
            } else {
                $suit = $card['suit'] ?? null;
            }
            
            if ($suit) {
                $suits[$suit] = ($suits[$suit] ?? 0) + 1;
            }
        }
        
        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
        if (empty($suits)) {
            return 0;
        }
        
        return max($suits);
    }
    
    private function countSameRank(array $cards): int
    {
        $ranks = [];
        foreach ($cards as $card) {
            // üéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∫–∞—Ä—Ç—ã
            if ($card instanceof Card) {
                $rank = $card->getRank()->value ?? null;
            } else {
                $rank = $card['rank'] ?? $card['value'] ?? null;
            }
            
            if ($rank) {
                $ranks[] = $rank;
            }
        }
        
        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
        if (empty($ranks)) {
            return 0;
        }
        
        $counts = array_count_values($ranks);
        
        // üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (empty($counts)) {
            return 0;
        }
        
        return max($counts);
    }
    
    private function countRank(array $cards, CardRank $rank): int
    {
        if (empty($cards)) return 0;
        
        $targetRank = $rank->value;
        
        return count(array_filter($cards, function ($card) use ($targetRank) {
            if ($card instanceof Card) {
                return $card->getRank()->value === $targetRank;
            }
            // üéØ –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤
            $cardRank = $card['rank'] ?? $card['value'] ?? null;
            return $cardRank === $targetRank;
        }));
    }
}